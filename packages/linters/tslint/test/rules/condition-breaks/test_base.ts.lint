a ? true : false;
a ? {} : [];
a ? {} : ['1'];
a ? 1 + 2 : true;
~~~~~~~~~~~~~~~~  [0]
a ? true : 1 + 2;
~~~~~~~~~~~~~~~~  [0]
a ? {
~~~~~
        a: true
~~~~~~~~~~~~~~~
    }
~~~~~
    : false;
~~~~~~~~~~~  [0]
a ? false : {
~~~~~~~~~~~~~
        a: true
~~~~~~~~~~~~~~~
    };
~~~~~  [0]
a ? o.b : o.c;
a = b ? f1()
    ~~~~~~~~
      : f2()
~~~~~~~~~~~~  [0]
const a = b ? f1() : f2();
a ? f1() : f2();
someFunction(a ? true : false);
someFunction(a ? f1() : f2());
a ? true : (b ? {
~~~~~~~~~~~~~~~~~
            ~~~~~
        a: 1
~~~~~~~~~~~~
~~~~~~~~~~~~
    } : true);
~~~~~~~~~~~~~  [1]
~~~~~~~~~~~~  [1]
a ? b() : c();
a ? l.b() : l.c();
a /* ccc */ ? l.b() /* abc */ : l.c() /* cba */; // aaa
a
    ? l.b()
    : l.c();
[0]: Expected new line between parts of ternary expression
[1]: Expected new line between parts of ternary expression (cannot be auto-fixed because of nesting)